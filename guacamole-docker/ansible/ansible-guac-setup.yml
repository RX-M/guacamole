# Ansible Playbook to stand up a Guacamole server in AWS
#
# This Playbook has 4 Plays:
# 0. Setup the VPC - Sets up a VPC for Guacamole with a private and public subnet
# 1. Configure localhost - Installs python libs, integrates ci-vars and creates an AWS CI instance
# 2. Configure CI Server - sets up Docker on the CI box and runs the preconfigured Jenkins container
# 3. Configure Jenkins - configures build jobs and security on Jenkins

#
# PLAY 1 - Configure localhost
#
- name: Configure localhost - Installs python libs, integrates ci-vars and creates an AWS CI instance
  hosts: localhost
  connection: local
  gather_facts: False

  vars:
     local_home: "{{ lookup('env','HOME') }}"
     local_user: "{{ lookup('env','USER') }}"
     ci_pwd: "{{ lookup('env','SCARIF_CI_PW') }}"
     aws_access_key_id: "{{ lookup('env','AWS_ACCESS_KEY_ID') }}"
     aws_secret_access_key: "{{ lookup('env','AWS_SECRET_ACCESS_KEY') }}"
     aws_ami: "{{ lookup('env','AWS_AMI') }}"
     aws_instance_type: "{{ lookup('env','AWS_INSTANCE_TYPE') }}"
     aws_default_region: "{{ lookup('env','AWS_DEFAULT_REGION') }}"
     aws_zone: "{{ lookup('env','AWS_ZONE') }}"
     aws_ssh_user: "{{ lookup('env','AWS_SSH_USER') }}"
     aws_subnet_id: "{{ lookup('env','AWS_SUBNET_ID') }}"
     aws_vpc_id: "{{ lookup('env','AWS_VPC_ID') }}"
     aws_sg_id: "{{ lookup('env','AWS_SG_ID') }}"
     aws_eip: "{{ lookup('env','AWS_EIP') }}"
     guac_mysql_pw: "{{ lookup('env','MYSQL_ROOT_PASSWORD') }}"
     guac_pw: "{{ lookup('env','GUACAMOLE_PASSWORD') }}"

  tasks:

  # 1.1 Setup local Python
  #
  # Ubuntu 16.04 only has python3 and this messes up a lot of stuff,
  # a python symlink is an easy solution (usually done before running
  # Ansible but just in case).
  - name: Create a symbolic link from python to python3
    file:
      src: /usr/bin/python3
      dest: /usr/bin/python
      state: link
    become: true
  # Old versions of pip cause OOM in Ansible
  - name: Install the latest version of pip
    pip:
      name: pip
      state: latest
  - name: pip install packages required for AWS, Docker and Password operations
    pip:
      name:
      - boto==2.49.0
      - boto3==1.9.82
      - bcrypt==3.1.6
      - docker==3.7.0
    become: true

  # 1.2 Create SSH keys for CI cloud instance
  #
  # Deletes existing keys and saves private key in ~/.ssh
  - name: Create the .ssh directory for keys if it does not exist
    file:
      path: "{{local_home}}/.ssh"
      owner: "{{local_user}}"
      state: directory
      mode: 0755
  - name: create hashed CI server password
    raw: python3 -c 'import bcrypt; pwd = "{{ci_pwd}}"; print("%s" % (bcrypt.hashpw(pwd.encode("utf-8"), bcrypt.gensalt(rounds=10, prefix=b"2a")).decode("utf-8")), end="")'
    register: ci_pwd_hash_dump
  - name: Check for a local key
    stat:
      path: "{{local_home}}/.ssh/guacamole-host.pem"
    register: stat_result
  - name: Delete local key if it exists
    local_action: file path="{{local_home}}/.ssh/guacamole-host.pem" state=absent
    when: stat_result.stat.exists
  - name: Confirm local key deleted
    stat:
      path: "{{local_home}}/.ssh/guacamole-host.pem"
    register: stat_result
  - name: Delete cluster key if it already exists
    ec2_key:
      name: guacamole-host
      region: "{{aws_default_region}}"
      state: absent
    register: stat_cloud_result
  - debug:
      msg: "Local key status: {{ stat_result.stat.exists }} - cluster key status: {{ stat_cloud_result.msg }}"
  - name: Create a new ec2 key pair, returns generated private key
    ec2_key:
      name: guacamole-host
      region: "{{aws_default_region}}"
    register: key_material
    when: stat_result.stat.exists == False and stat_cloud_result != ""
  - name: Save key material to file
    local_action: copy content={{ key_material.key.private_key }} dest="{{local_home}}/.ssh/guacamole-host.pem"
    when: key_material.changed
  - name: Check that new key is saved
    stat:
      path: "{{local_home}}/.ssh/guacamole-host.pem"
    register: stat_result
  - name: Protect key
    file:
      path: "{{local_home}}/.ssh/guacamole-host.pem"
      mode: 0400
    when: stat_result.stat.exists

  # 1.3 Create CI cloud instance
  #
  # Provisions 1 Ubuntu 16.04 instance w/ 1 CPU & 2 RAM on the default subnet
  # WontFix: create VPC, subnet, security group, etc.

  - name: Get VPC Subnet Info
    ec2_vpc_subnet_facts:
      filters:
        "tag:Name": guac-vpc-public
    register: guac_subnets

  - name: Get Security Group Info
    ec2_group_facts:
      filters:
        "tag:Name": guac-sg-public
    register: guac_sg

  - name: Provision AWS instance for Guacamole
    ec2:
      assign_public_ip: yes
      count: 1
      group_id: "{{ guac_sg.security_groups[0].group_id }}"
      image: "{{aws_ami}}"
      instance_tags:
        Name: "guacamole-host"
        role: "guacamole-host"
      instance_type: "{{aws_instance_type}}"
      key_name: guacamole-host
      region: "{{aws_default_region}}"
      vpc_subnet_id: "{{ guac_subnets.subnets[0].subnet_id }}"
      wait: yes
    register: guac_facts
#  - debug:
#      msg: "Using CI instance external IP: {{ guac_facts.instances.0.public_ip }} for Route 53 entry"
#  - route53:
#      hosted_zone_id: Z1PKS0TBPA1WSF
#      overwrite: yes
#      record: scarif.rx-m.net
#      state: present
#      ttl: 60
#      type: A
#      value: "{{ guac_facts.instances.0.public_ip }}"
#      wait: yes
#      zone: rx-m.net
  - name: Allocate lab-rx-m-net-do-not-delete EIP to new instance
    ec2_eip:
      aws_access_key: "{{aws_access_key_id}}"
      aws_secret_key: "{{aws_secret_access_key}}"
      ip: "{{aws_eip}}"
      device_id: "{{ guac_facts.instance_ids[0] }}"
    register: eip
  - name: Refresh the hosts inventory cache to pickup the new cloud instance
    shell: /etc/ansible/hosts --refresh-cache
  - name: Refresh inventory to ensure new instaces exist in the Ansible inventory
    meta: refresh_inventory

  # 1.4 Wait for SSH to be available on new instance
  #
  - debug:
      msg: "Waiting for SSH availabilty on IP: {{ eip.public_ip }} before proceeding"
  - name: Wait for SSH
    wait_for:
     host: "{{ eip.public_ip }}"
     port: 22
     delay: 10
     timeout: 300


  # 1.5 Update Route53 Entry for lab.rx-m.net to point to the Elastic IP
  - name: Update Route53 Entry for lab.rx-m.net
    route53:
      state: present
      zone: rx-m.net
      record: lab.rx-m.net
      type: A
      ttl: 300
      value:
        - "{{ eip.public_ip }}"
      wait: true
      overwrite: true

#
# Play 2 - Configure AWS CI instance
#
- name: Bootstrap and install packages on CI host
  hosts: "tag_role_guacamole_host"
  gather_facts: False
  user: ubuntu
  become: True
  vars:
    local_home: "{{ lookup('env','HOME') }}"
    local_user: "{{ lookup('env','USER') }}"
    ansible_ssh_private_key_file: "{{local_home}}/.ssh/guacamole-host.pem"

  tasks:
  # 2.1 Setup python on cloud CI server
  #
  # Install system and pip packages and link in python. The File module
  # can't run remote without /usr/bin/python so we have to make the link
  # manually.
  - name: Create symlink from /usr/bin/python3 /usr/bin/python
    raw: ln -s /usr/bin/python3 /usr/bin/python
  - name: Install prerequisite system packages
    apt:
      name: "{{ packages }}"
      update_cache: yes
    vars:
      packages:
      - python3-pip=8.1.1-2ubuntu0.4
      - apt-transport-https
      - ca-certificates
      - curl
      - software-properties-common
  - name: pip packages for AWS and Docker operations
    pip:
      name:
      - boto3==1.9.82
      - docker==3.7.0

  # 2.2 Install docker
  - name: Add Docker GPG key
    apt_key: url=https://download.docker.com/linux/ubuntu/gpg
  - name: Add Docker APT repository
    apt_repository:
      repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable
  - name: Install Docker CE
    apt: name=docker-ce=5:18.09.1~3-0~ubuntu-xenial


#
# Play 3 - Configure and run the Guacamole Containers
#
- name: Configure CI host dirs, fetch configs and run the mysql, guad, and guacamole containers
  hosts: "tag_role_guacamole_host"
  user: ubuntu
  gather_facts: True
  vars:
    local_home: "{{ lookup('env','HOME') }}"
    local_user: "{{ lookup('env','USER') }}"
    ansible_ssh_private_key_file: "{{local_home}}/.ssh/guacamole-host.pem"
    guac_mysql_pw: "{{ lookup('env','MYSQL_ROOT_PASSWORD') }}"
    guac_pw: "{{ lookup('env','GUACAMOLE_PASSWORD') }}"

  tasks:
  # 3.1 Configure CI server for TLS
  #
  # Copy over the guac_db.sql file to the guacamole-host server
  - name: Create directories for Guacamole's MySQL DB
    become: yes
    file:
      path: /home/ubuntu/guacamole/
      owner: ubuntu
      state: directory
      mode: 0755
  - name: Upload guac_db.sql
    become: yes
    copy:
      src: guac_db.sql
      dest: /home/ubuntu/guacamole/guac_db.sql
      owner: ubuntu
      mode: 0755
  - name: Create directory for Guacamole's SSL Configuration
    become: yes
    file:
      path: /home/ubuntu/ssl/
      owner: ubuntu
      state: directory
      mode: 0755
  - name: Synchronize the local ssl/ directory and its contents
    become: yes
    synchronize:
      src: ssl/
      dest: /home/ubuntu/ssl

  # 3.2 Run the Guacamole server, database, and daemon containers
  - name: Create the guac network
    become: yes
    docker_network:
      name: guac
      driver: bridge
  - name: Create the database volume
    become: yes
    docker_volume:
      name: database
  - name: Create and start mysql container
    become: yes
    docker_container:
      env:
        MYSQL_ROOT_PASSWORD: "{{guac_mysql_pw}}"
        MYSQL_DATABASE: "guacamole_db"
        MYSQL_USER: "guacamole_user"
        MYSQL_PASSWORD: "{{guac_pw}}"
      image: mysql
      log_driver: json-file
      log_options:
        max-size: "10m"
        max-file: "5"
      name: mysql
      networks:
        - name: guac
      restart_policy: always
      state: started
      volumes:
        - "/home/ubuntu/guacamole/:/docker-entrypoint-initdb.d/"
        - "database:/var/lib/mysql"
  - name: Create and start guacd container
    become: yes
    docker_container:
      env:
        GUACD_LOG_LEVEL: "debug"
      image: guacamole/guacd
      links:
        - mysql
      log_driver: json-file
      log_options:
        max-size: "10m"
        max-file: "5"
      name: guacd
      networks:
        - name: guac
          links:
            - mysql
      restart_policy: always
      state: started
  - name: Create and start guacamole container
    become: yes
    docker_container:
      env:
        MYSQL_DATABASE: "guacamole_db"
        MYSQL_HOSTNAME: "mysql.guacamole-docker_guac"
        MYSQL_USER: "guacamole_user"
        MYSQL_PASSWORD: "{{guac_pw}}"
      image: guacamole/guacamole
      links:
        - mysql
        - guacd
      log_driver: json-file
      log_options:
        max-size: "10m"
        max-file: "5"
      name: guacamole
      networks:
        - name: guac
          links:
            - mysql
            - guacd
      ports:
        - "80:8080"
        - "443:8443"
      restart_policy: always
      volumes:
        - "/home/ubuntu/ssl/cert1.pem:/certs/cert1.pem"
        - "/home/ubuntu/ssl/privkey1.pem:/certs/privkey1.pem"
        - "/home/ubuntu/ssl/server.xml:/usr/local/tomcat/conf/server.xml"
        - "/home/ubuntu/ssl/web.xml:/usr/local/tomcat/conf/web.xml"
      state: started
