#
# PLAY 0 - Setup the VPC
#
- name: Create the VPC infrastructure that will support the Guac Containers
  hosts: localhost
  connection: local
  gather_facts: False

  vars:
     aws_access_key_id: "{{ lookup('env','AWS_ACCESS_KEY_ID') }}"
     aws_secret_access_key: "{{ lookup('env','AWS_SECRET_ACCESS_KEY') }}"
     aws_default_region: "{{ lookup('env','AWS_DEFAULT_REGION') }}"

  tasks:
# 1.1 Setup local Python in case this script is being run independently
#
# Ubuntu 16.04 only has python3 and this messes up a lot of stuff,
# a python symlink is an easy solution (usually done before running
# Ansible but just in case).
  - name: Create a symbolic link from python to python3
    file:
      src: /usr/bin/python3
      dest: /usr/bin/python
      state: link
    become: true
  # Old versions of pip cause OOM in Ansible
  - name: Install the latest version of pip
    pip:
      name: pip
      state: latest
  - name: pip install packages required for AWS, Docker and Password operations
    pip:
      name:
      - boto==2.49.0
      - boto3==1.9.82
      - bcrypt==3.1.6
      - docker==3.7.0
    become: true

#
# Create the Guac VPC first
#
  - name: create Guac VPC
    ec2_vpc_net:
      name: guac-vpc
      cidr_block: 10.20.0.0/16
      region: "{{ aws_default_region }}"
      state: present
      aws_access_key: "{{ aws_access_key_id }}"
      aws_secret_key: "{{ aws_secret_access_key }}"
      tags:
        role: guacamole-vpc
    register: guacvpc

#
# Create a public (for guac vm) Subnet & Private (for student vm) Subnets
#
  - name: associate a public subnet to the VPC
    ec2_vpc_subnet:
      state: present
      vpc_id: "{{ guacvpc.vpc.id }}"
      region: "{{ aws_default_region }}"
      cidr: "{{ guacvpc.vpc.cidr_block }}"
      aws_access_key: "{{ aws_access_key_id }}"
      aws_secret_key: "{{ aws_secret_access_key }}"
      cidr: 10.20.16.0/20
      map_public: true
      resource_tags:
        Name: guac-vpc-public
        Role: guac-vpc
    register: public_subnet

  - name: associate a private subnet to the VPC
    ec2_vpc_subnet:
      state: present
      vpc_id: "{{ guacvpc.vpc.id }}"
      region: "{{ aws_default_region }}"
      cidr: "{{ guacvpc.vpc.cidr_block }}"
      aws_access_key: "{{ aws_access_key_id }}"
      aws_secret_key: "{{ aws_secret_access_key }}"
      cidr: 10.20.32.0/20
      map_public: false
      resource_tags:
        Name: guac-vpc-private
        Role: guac-vpc
    register: private_subnet
#
# Create an IGW and associate it with the public subnet with a route table
#
  - name: create IGW and associate it with the Public Subnet
    ec2_vpc_igw:
      vpc_id: "{{ guacvpc.vpc.id }}"
      region: "{{ aws_default_region }}"
      aws_access_key: "{{ aws_access_key_id }}"
      aws_secret_key: "{{ aws_secret_access_key }}"
      state: "present"
      tags:
        Name: guac-igw
        Role: guac-vpc
    register: guac_igw

  - name: Set up public subnet route table
    ec2_vpc_route_table:
      vpc_id: "{{ guacvpc.vpc.id }}"
      region: "{{ aws_default_region }}"
      aws_access_key: "{{ aws_access_key_id }}"
      aws_secret_key: "{{ aws_secret_access_key }}"
      tags:
        Name: guac-rt
        Role: guac-vpc
      subnets:
        - "{{ public_subnet.subnet.id }}"
      routes:
        - dest: 0.0.0.0/0
          gateway_id: "{{ guac_igw.gateway_id }}"
    register: public_route_table
#
# Create a NAT Gateway in the public subnet to allow internet connectivity from private subnet
#

  - name: Allocate a new EIP for the NAT Gateway
    ec2_eip:
      region: "{{ aws_default_region }}"
      release_on_disassociation: true
    register: nat_eip

  - name: Create new nat gateway using the allocated EIP address and wait for available status
    ec2_vpc_nat_gateway:
      state: present
      subnet_id: "{{ public_subnet.subnet.id }}"
      eip_address: "{{ nat_eip.public_ip }}"
      wait: yes
      region: "{{ aws_default_region }}"
    register: guac_nat_gateway

  - name: Get VPC Main Route Table Info
    ec2_vpc_route_table_facts:
      filters:
        "vpc-id": "{{ guacvpc.vpc.id }}"
        "association.main": "true"
    register: guac_rt_main

  - name: Edit the guac-vpc main route table to include a route to the NAT Gateway
    ec2_vpc_route_table:
      vpc_id: "{{ guacvpc.vpc.id }}"
      region: "{{ aws_default_region }}"
      lookup: id
      route_table_id: "{{ guac_rt_main.route_tables[0].id }}"
      purge_subnets: false
      routes:
        - dest: 0.0.0.0/0
          nat_gateway_id: "{{ guac_nat_gateway.nat_gateway_id }}"

#
# Create a security group for each of the guac-vpc subnets
#
  - name: Create a public security group for guacamole-host gateway
    ec2_group:
      name: guac_public
      description: Security Group for guacamole-host gateway
      vpc_id: "{{ guacvpc.vpc.id }}"
      region: "{{ aws_default_region }}"
      tags:
        Name: guac-sg-public
        Role: guac-vpc
      rules:
        - proto: tcp
          ports:
          - 80
          cidr_ip: 0.0.0.0/0
          rule_desc: allow all on port 80
        - proto: tcp
          ports:
          - 443
          cidr_ip: 0.0.0.0/0
          rule_desc: allow all on port 443
        - proto: tcp
          ports:
          - 22
          cidr_ip: 0.0.0.0/0
          rule_desc: allow ssh on port 22
    register: public_sg
  - name: Ensure guac private has all the correct rules
    ec2_group:
      name: guac_private
      description: Security Group for student VMs
      vpc_id: "{{ guacvpc.vpc.id }}"
      region: "{{ aws_default_region }}"
      tags:
        Name: guac-sg-private
        Role: guac-vpc
      rules:
        - proto: all
          group_name: guac_public
        - proto: all
          group_name: guac_private
